// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: pb/exchange.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeClient interface {
	//* 添加管理员 *
	AdminAdd(ctx context.Context, in *AdminAddReq, opts ...grpc.CallOption) (*AdminAddResp, error)
	//* 更新管理员 *
	AdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*AdminUpdateResp, error)
	//* 删除管理员 *
	AdminDelete(ctx context.Context, in *AdminDeleteReq, opts ...grpc.CallOption) (*AdminDeleteResp, error)
	//* 获取管理员 *
	AdminDetails(ctx context.Context, in *AdminDetailsReq, opts ...grpc.CallOption) (*AdminDetailsResp, error)
	//* 管理员列表 *
	AdminSearch(ctx context.Context, in *AdminSearchReq, opts ...grpc.CallOption) (*AdminSearchResp, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) AdminAdd(ctx context.Context, in *AdminAddReq, opts ...grpc.CallOption) (*AdminAddResp, error) {
	out := new(AdminAddResp)
	err := c.cc.Invoke(ctx, "/pb.Exchange/AdminAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) AdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*AdminUpdateResp, error) {
	out := new(AdminUpdateResp)
	err := c.cc.Invoke(ctx, "/pb.Exchange/AdminUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) AdminDelete(ctx context.Context, in *AdminDeleteReq, opts ...grpc.CallOption) (*AdminDeleteResp, error) {
	out := new(AdminDeleteResp)
	err := c.cc.Invoke(ctx, "/pb.Exchange/AdminDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) AdminDetails(ctx context.Context, in *AdminDetailsReq, opts ...grpc.CallOption) (*AdminDetailsResp, error) {
	out := new(AdminDetailsResp)
	err := c.cc.Invoke(ctx, "/pb.Exchange/AdminDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) AdminSearch(ctx context.Context, in *AdminSearchReq, opts ...grpc.CallOption) (*AdminSearchResp, error) {
	out := new(AdminSearchResp)
	err := c.cc.Invoke(ctx, "/pb.Exchange/AdminSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
// All implementations must embed UnimplementedExchangeServer
// for forward compatibility
type ExchangeServer interface {
	//* 添加管理员 *
	AdminAdd(context.Context, *AdminAddReq) (*AdminAddResp, error)
	//* 更新管理员 *
	AdminUpdate(context.Context, *AdminUpdateReq) (*AdminUpdateResp, error)
	//* 删除管理员 *
	AdminDelete(context.Context, *AdminDeleteReq) (*AdminDeleteResp, error)
	//* 获取管理员 *
	AdminDetails(context.Context, *AdminDetailsReq) (*AdminDetailsResp, error)
	//* 管理员列表 *
	AdminSearch(context.Context, *AdminSearchReq) (*AdminSearchResp, error)
	mustEmbedUnimplementedExchangeServer()
}

// UnimplementedExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeServer struct {
}

func (UnimplementedExchangeServer) AdminAdd(context.Context, *AdminAddReq) (*AdminAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAdd not implemented")
}
func (UnimplementedExchangeServer) AdminUpdate(context.Context, *AdminUpdateReq) (*AdminUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdate not implemented")
}
func (UnimplementedExchangeServer) AdminDelete(context.Context, *AdminDeleteReq) (*AdminDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDelete not implemented")
}
func (UnimplementedExchangeServer) AdminDetails(context.Context, *AdminDetailsReq) (*AdminDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDetails not implemented")
}
func (UnimplementedExchangeServer) AdminSearch(context.Context, *AdminSearchReq) (*AdminSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSearch not implemented")
}
func (UnimplementedExchangeServer) mustEmbedUnimplementedExchangeServer() {}

// UnsafeExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServer will
// result in compilation errors.
type UnsafeExchangeServer interface {
	mustEmbedUnimplementedExchangeServer()
}

func RegisterExchangeServer(s grpc.ServiceRegistrar, srv ExchangeServer) {
	s.RegisterService(&Exchange_ServiceDesc, srv)
}

func _Exchange_AdminAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).AdminAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Exchange/AdminAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).AdminAdd(ctx, req.(*AdminAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_AdminUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).AdminUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Exchange/AdminUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).AdminUpdate(ctx, req.(*AdminUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_AdminDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).AdminDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Exchange/AdminDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).AdminDelete(ctx, req.(*AdminDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_AdminDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).AdminDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Exchange/AdminDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).AdminDetails(ctx, req.(*AdminDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_AdminSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).AdminSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Exchange/AdminSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).AdminSearch(ctx, req.(*AdminSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Exchange_ServiceDesc is the grpc.ServiceDesc for Exchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminAdd",
			Handler:    _Exchange_AdminAdd_Handler,
		},
		{
			MethodName: "AdminUpdate",
			Handler:    _Exchange_AdminUpdate_Handler,
		},
		{
			MethodName: "AdminDelete",
			Handler:    _Exchange_AdminDelete_Handler,
		},
		{
			MethodName: "AdminDetails",
			Handler:    _Exchange_AdminDetails_Handler,
		},
		{
			MethodName: "AdminSearch",
			Handler:    _Exchange_AdminSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/exchange.proto",
}
